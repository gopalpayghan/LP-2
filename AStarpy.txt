import heapq

def astar(grid, start, goal):
    # Directions: up, right, down, left
    directions = [(0, -1), (1, 0), (0, 1), (-1, 0)]
    
    # Priority queue for open nodes
    open_set = [(0, start)]
    
    # Track visited nodes and parents
    visited = set()
    parents = {}
    
    # Cost from start to node
    g_score = {start: 0}
    
    while open_set:
        # Get node with lowest f_score
        f_score, current = heapq.heappop(open_set)
        
        # Goal check
        if current == goal:
            # Reconstruct path
            path = []
            while current in parents:
                path.append(current)
                current = parents[current]
            path.append(start)
            return path[::-1]
        
        # Mark as visited
        if current in visited:
            continue
        visited.add(current)
        
        # Check neighbors
        x, y = current
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            neighbor = (nx, ny)
            
            # Skip invalid positions or obstacles
            if (nx < 0 or ny < 0 or nx >= len(grid[0]) or ny >= len(grid) or 
                grid[ny][nx] == 1 or neighbor in visited):
                continue
            
            # Calculate new cost
            new_g = g_score[current] + 1
            
            if neighbor not in g_score or new_g < g_score[neighbor]:
                # Update scores
                g_score[neighbor] = new_g
                h_score = abs(nx - goal[0]) + abs(ny - goal[1])  # Manhattan distance
                f_score = new_g + h_score
                
                # Add to open set
                heapq.heappush(open_set, (f_score, neighbor))
                parents[neighbor] = current
    
    return None  # No path found

# Example usage
if __name__ == "__main__":
    # Simple grid (0=empty, 1=obstacle)
    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 0, 0],
        [0, 0, 0, 0, 0],
        [0, 1, 0, 1, 0],
        [0, 0, 0, 0, 0]
    ]
    
    start = (0, 0)
    goal = (4, 4)
    
    path = astar(grid, start, goal)
    
    if path:
        print("Path found:", path)
        # Print the grid with path
        for y in range(len(grid)):
            for x in range(len(grid[0])):
                if (x, y) == start:
                    print("S", end=" ")
                elif (x, y) == goal:
                    print("G", end=" ")
                elif (x, y) in path:
                    print("*", end=" ")
                elif grid[y][x] == 1:
                    print("#", end=" ")
                else:
                    print(".", end=" ")
            print()
    else:
        print("No path found")